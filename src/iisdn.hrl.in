%%% @configure_input@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% iisdn.hrl   Erlang header file defining the structures in iisdn.h   %%%
%%%                                                                     %%%
%%%             This file defines the SMI interface.                    %%%
%%%---------------------------------------------------------------------%%%
%%% Copyright Motivity Telecom Inc. 2001, 2002, 2003, 2004              %%%
%%%                                                                     %%%
%%% All rights reserved. No part of this computer program(s) may be     %%%
%%% used, reproduced, stored in any retrieval system, or transmitted,   %%%
%%% in any form or by any means, electronic, mechanical, photocopying,  %%%
%%% recording, or otherwise without prior written permission of         %%%
%%% Motivity Telecom Inc.                                               %%%
%%%---------------------------------------------------------------------%%%
%%%                                                                     %%%
%%%  The Netaccess driver API header file <iisdn.h> defines the format  %%%
%%%  of the binary interface to the embedded processor on the card.     %%%
%%%  When we receive an incoming SMI control message from the driver    %%%
%%%  we want to parse out all the elements of the message.  The         %%%
%%%  <iisdn.h> header file defines how this is done.                    %%%
%%%                                                                     %%%
%%%  The full message received is matched against the L3L4 SMI Common   %%%
%%%  message structure:                                                 %%%
%%%                                                                     %%%
%%%      <<CommonHeader/binary, MessageSpecificData/binary>>            %%%
%%%                                                                     %%%
%%%      [Note:  determining size is left out of current discussion]    %%%
%%%                                                                     %%%
%%%  CommonHeader is matched against the L3L4 Message Common Header:    %%%
%%%                                                                     %%%
%%%    <<Lapdid, Msgtype, L4_ref, Call_ref, Bchannel, Interface,        %%%
%%%                    Bchannel_mask, Lli, Data_channel>>               %%%
%%%                                                                     %%%
%%%  Inspecting Msgtype we discover the appropriate mask to use for     %%%
%%%  matching the MessageSpecificData.                                  %%%
%%%                                                                     %%%
%%%  The L3L4 Message Common Header is defined in the typedef for a     %%%
%%%  structure in <iisdn.h> named L3_to_L4_struct.  In the iisdn.erl    %%%
%%%  module the function l3_to_l4/1 defines the unpacking of            %%%
%%%  this structure into a record of the same name.  Similiarly a       %%%
%%%  record of type #l4_to_l3{} is passed to the function               %%%
%%%  l4_to_l3/1 to create a binary suitable to be sent to the           %%%
%%%  board.                                                             %%%
%%%                                                                     %%%
%%%  Most structures which appear in <iisdn.h> should have both a       %%%
%%%  corresponding record definition and a function with arity one      %%%
%%%  which accepts a record or a binary and returns a record or a       %%%
%%%  binary.                                                            %%%
%%%                                                                     %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% firmware version
-define(IISDN_VERSION, @IISDN_VERSION@).

%% basic types
-define(IISDNu8bit,  @SIZEOF_IISDNU8BIT@/native-unsigned-integer-unit:8).
-define(IISDNs8bit,  @SIZEOF_IISDNS8BIT@/native-signed-integer-unit:8).
-define(IISDNu16bit, @SIZEOF_IISDNU16BIT@/native-unsigned-integer-unit:8).
-define(IISDNs16bit, @SIZEOF_IISDNS16BIT@/native-signed-integer-unit:8).
-define(IISDNu32bit, @SIZEOF_IISDNU32BIT@/native-unsigned-integer-unit:8).
-define(IISDNs32bit, @SIZEOF_IISDNS32BIT@/native-signed-integer-unit:8).
-define(IISDNp16bit, @SIZEOF_IISDNP16BIT@/native-signed-integer-unit:8).
-define(IISDNp32bit, @SIZEOF_IISDNP32BIT@/native-signed-integer-unit:8).

%% array sizes
-define(IISDN_NUM_DS1_INTERFACES, @IISDN_NUM_DS1_INTERFACES@).
-define(IISDN_MAX_SPID_LEN, @IISDN_MAX_SPID_LEN@).
-define(IISDN_MAX_DN_LEN, @IISDN_MAX_DN_LEN@).
-define(IISDN_MAX_HDLC_CHANNEL, @IISDN_MAX_HDLC_CHANNEL@).
-define(IISDN_MAX_LINES, @IISDN_MAX_LINES@).


%%
%% general structure of a board to host message
%%
-record(l4_to_l3,
		{lapdid=0, msgtype=0, l4_ref=0, call_ref=0, lli=0, data = <<>>}).

%%
%% general structure of a host to board message
%%
-record(l3_to_l4,
		{lapdid=0, msgtype=0, l4_ref=0, call_ref=0, bchanel=0,
		iface=0, bchannel_mask=0, lli=0, data_channel=0, data = <<>>}).

%%
%% error in response to L4L3mXXXXX
%%
-define(L3L4mERROR, 16#20). 
-define(L3L4mErrorMsg(X), element(2, element(2, lists:keysearch(X, 1,
		[{0, no_erorr}, {1, lapdid_out_of_range},
		{2, lapdid_not_established}, {3, invalid_called_number},
		{4, no_crv_available}, {5, no_crstruct_available},
		{6, call_ref_error}, {7, invalid_b_channel},
		{8, b_chanel_restarting}, {9, b_chanel_oos}, 
		{10, invalid_call_type}, {11, invalid_conn_type},
		{12, protocol_not_disabled}, {13, invalid_hdlc_maping},
		{14, invalid_data_queue}, {15, invalid_comand_args},
		{16, invalid_msg_for_state}, {17, data_packet_lost},
		{18, pm_not_esf}, {19, invalid_interface},
		{20, b_channel_inuse}, {21, invalid_lli},
		{22, vc_table_full}, {23, lli_not_found}, {24, blocked},
		{25, no_hardware}, {26, invalid_spid_len}, {27, non_nfas},
		{28, invalid_state}, {29, service_not_offered},
		{30, dchan_temp_unavail}, {31, too_many_q931_stacks},
		{32, service_not_config}, {33, data_interface_required},
		{34, data_interface_invalid}, {35, sym_mode_not_supported},
		{36, invalid_bufsz}, {37, bond_chan_not_cnfg},
		{38, bond_chan_bit_conflict}, {39, bond_wrong_spyder_chip},
		{40, bond_too_many_channels}, {41, bond_dup_addon_chan},
		{42, dchan_odd_pointer_error}, {43, dchan_too_few_buffers},
		{44, dchan_too_many_buffers}, {45, dchan_give_take_nonzero},
		{46, dchan_zero_rxbuf_len}, {47, sym_mode_required},
		{48, dlci_manditory}, {49, chan_kbit_rate_bad},
		{50, invalid_mem_size}, {51, not_enough_memory},
		{52, tx_buffer_misaligned}, {53, x_buffer_misaligned},
		{54, too_many_dlcis}, {55, bond_bad_state}, {56, spid_rejected},
		{57, tei_ident_remove_req}, {58, spid2_rejected},
		{59, invalid_smi_msgid}, {60, invalid_clock_mode},
		{61, no_overflow_queue}, {62, too_many_cas_dest},
		{63, segment_too_large}, {64, segment_message_expected},
		{65, segment_message_invalid}, {66, segment_timer_expired},
		{67, invalid_download_msg}, {68, protocol_disabled},
		{69, invalid_variant}, {70, too_many_links}, {71, too_many_headers},
		{72, fatal_error}, {73, hot_swap_extraction},
		{74, dchan_out_of_range}])))).

-define(L4L3mSET_HARDWARE, 16#A7). 
-define(L4L3mREQ_HW_STATUS, 16#A8). 
-define(L3L4mHARDWARE_STATUS, 16#24). 
-record(hardware_data,
		{clocking=0, clocking2=0, enable_clocking2=0, 
		netref_clocking=0, netref_rate=0, ctbus_mode=0,
		force_framer_init=0, tdm_rate=0,
		enable_8370_rliu_monitor=0, dbcount=0, 
		enable_t810x_snap_mode=0, clk_status=0,
		line_data = lists:duplicate(?IISDN_MAX_LINES, #line_data{}),
		csu = lists:duplicate(?IISDN_MAX_LINES, 0)}.
-record(line_data,
		{framing=0, line_code=0, pm_mode=0, line_length=0, term=0,
		line_type=0, integrate_alarms=0, filter_unsolicited=0,
		filter_yellow=0, bri_l1mode=0, briL1_cmd=0, bri_loop=0, 
		bril1_t3=0, bril1_t4=0}).


-define(L4L3mSET_TSI, 16#A9). 
-define(L4L3mREQ_TSI_STATUS, 16#D4). 
-define(L3L4mTSI_STATUS, 16#4A). 
-define(IISDN_MAX_SET_TSI, 120).
-define(IISDNtsiGRANULARITY_64K, 16#00).
-define(IISDNtsiGRANULARITY_32K, 16#01).
-define(IISDNtsiGRANULARITY_16K, 16#02).
-define(IISDNtsiGRANULARITY_8K, 16#03).
-define(IISDNtsiDSi0, 16#0000).
-define(IISDNtsiDSi1, 16#0100).
-define(IISDNtsiDSi2, 16#0200).
-define(IISDNtsiDSi3, 16#0300).
-define(IISDNtsiDSi4, 16#0400).
-define(IISDNtsiDSi5, 16#0500).
-define(IISDNtsiDSi6, 16#0600).
-define(IISDNtsiDSi7, 16#0700).
-define(IISDNtsiDSo0, 16#0800).
-define(IISDNtsiDSo1, 16#0900).
-define(IISDNtsiDSo2, 16#0a00).
-define(IISDNtsiDSo3, 16#0b00).
-define(IISDNtsiDSo4, 16#0c00).
-define(IISDNtsiDSo5, 16#0d00).
-define(IISDNtsiDSo6, 16#0e00).
-define(IISDNtsiDSo7, 16#0f00).
-define(IISDNtsiLINE_A, 16#1000).
-define(IISDNtsiLINE_B, 16#1100).
-define(IISDNtsiLINE_C, 16#1200).
-define(IISDNtsiLINE_D, 16#1300).
-define(IISDNtsiLINE_E, 16#1400).
-define(IISDNtsiLINE_F, 16#1500).
-define(IISDNtsiLINE_G, 16#1600).
-define(IISDNtsiLINE_H, 16#1700).
-define(IISDNtsiHDLC_0, 16#2000).
-define(IISDNtsiHDLC_1, 16#2100).
-define(IISDNtsiHDLC_2, 16#2200).
-define(IISDNtsiHDLC_3, 16#2300).
-define(IISDNtsiHDLC_4, 16#2400).
-define(IISDNtsiHDLC_5, 16#2500).
-define(IISDNtsiHDLC_6, 16#2600).
-define(IISDNtsiHDLC_7, 16#2700).
-define(IISDNtsiHDLC_8, 16#2800).
-define(IISDNtsiHDLC_9, 16#2900).
-define(IISDNtsiHDLC_10, 16#2a00).
-define(IISDNtsiHDLC_11, 16#2b00).
-define(IISDNtsiHDLC_12, 16#2c00).
-define(IISDNtsiHDLC_13, 16#2d00).
-define(IISDNtsiHDLC_14, 16#2e00).
-define(IISDNtsiHDLC_15, 16#2f00).
-define(IISDNtsiHDLC_16, 16#3000).
-define(IISDNtsiMODEM_0, 16#6000).
-define(IISDNtsiMODEM_1, 16#6100).
-define(IISDNtsiDISABLE, 16#4000).
-define(IISDNtsiPATTERN, 16#5000).
-define(IISDNtsiDSP_0, 16#7000).
-define(IISDNtsiDSP_1, 16#7100).
-define(IISDNtsiDSP_2, 16#7200).
-define(IISDNtsiDSP_3, 16#7300).
-define(IISDNtsiDSP_4, 16#7400).
-define(IISDNtsiDSP_5, 16#7500).
-define(IISDNtsiDSP_6, 16#7600).
-define(IISDNtsiDSP_7, 16#7700).
-define(IISDNtsiDSi(X), (X bsl 8)).
-define(IISDNtsiDSo(X), ((X + 8) bsl 8)).
-define(IISDNtsiLINE(X), 	(16#1000 bor (X bsl 8)).
-define(IISDNtsiHDLC(X), 	(16#2000 bor (X bsl 8)).
-define(IISDNtsiMODEM(X), (16#6000 bor (X bsl 8)).
-define(IISDNtsiDSP(X), 	(16#7000 bor (X bsl 8)).
-define(IISDNtsiCTd(X), 	(16#8000 bor (X bsl 10)).
-record(tsi_data, {tsi_ack_enable = 0, num_mappings = 0, 
		granularity = 0, last = 0, tsi_map = []}).
-record(tsi_map, {destination = 0, source = 0}).


-define(L4L3mENABLE_PROTOCOL,  16#B6).
-record(ena_proto_data,
		{command=0, command_parameter=0, level1 = #level1_cnfg{},
		level2 = #level2_cnfg{}, level3 = #level3_cnfg{}}).

-define(IISDNl1modHDLC,         0).
-define(IISDNl1modRAW,          1).
-define(IISDNl1modV110,         2).
-define(IISDNl1modRAW_SPECIAL1, 4).
-define(IISDNl1modISLP,         5).
-define(IISDNl1modMODEM,        6).
-define(IISDNl1modSIGNALING,    7).
-define(IISDNl1modETHERNET,     8).
-define(IISDNl1modBULK_RAW,     9).
-record(level1_cnfg,
      {l1_mode=0, invert_hdlc=0, num_txbuf=0, num_rxbuf=0,
      buffsz=0, chain=0, device=0, bit_reverse=0, vme_lock=0, 
      hdlc_channels=0, chan_kbit_rate=0, crc_bytes=0, 
      crc_ignore_errs=0,
		rate_adapt = #rate_adapt{},
		raw_fillchar=#raw_fillchar{},
		hdlc_flag_fill=#hdlc_flag_fill{},
		modem=#modem{},
		v110=#v110{}}).
-record(rate_adapt, {enable=0, rate_adapt_value=0}).
-record(raw_fillchar, {enable=0, fill_value=0}).
-record(hdlc_flag_fill, {enable=0, mode=0, value=0}).
-record(modem, {originate=0, faxClass=0, encoding=0, amf=0,
		amf_params=#amf_params{}, minBPS=0, maxBPS=0}).
-record(amf_params, {'0'=0, '1'=0, '2'=0, '3'=0}).
-record(v110, {bit_rate=0, auto_detect=0}).


-define(IISDNl2modLAP_D,       0).
-define(IISDNl2modDISABLED,    1).
-define(IISDNl2modLAP_B,       2).
-define(IISDNl2modBONDING,     3).
-define(IISDNl2modLAP_F,       4).
-define(IISDNl2modDPNSS,       5).
-define(IISDNl2modLAP_D_EFA,   6).
-define(IISDNl2modPM,          7).
-define(IISDNl2modSS7,         8).
-define(IISDNl2modUDP_IP,      9).
-define(IISDNl2modDASS,       10).
-define(IISDNl2modV110,       11).
-define(IISDNl2modV120,       12).
-define(IISDNl2modLAP_F_CORE, 13).
-define(IISDNl2modSS7_MON,    14).
-define(IISDNdirUSER_SIDE,     0).
-define(IISDNdirNETWORK_SIDE,  1).
-define(IISDNdirSYMMETRIC,     2).
-record(level2_cnfg,
		{par=#l2_lap_params{},
		data_interface=#data_interface{},
		consts=#l2_lap_consts{}}).
-record(l2_lap_params,
		{mode=?IISDNl2modLAP_D, dce_dte=0, tei_mode=0, no_sabme=0,
		l2_detail=0, timestamp=0, ui_mode=0, priority=0, no_reestab=0,
		mode_1tr6=0, mode_tei_1=0, no_piggyback=0}).
-record(l2_lap_consts,
		{t200=0, t201=0, t202=0, t203=0, n200=0, n201=0, n202=0, k=0}).
-record(l2_ss7_params,
		{mode=?IISDNl2modSS7, variant=0}).
-record(l2_ss7_consts,
		{t1=0, t2=0, t3=0, t4n=0, t4e=0, t5=0, t6=0, t7=0}).
-record(l2_udpip_params,
		{mode=?IISDNl2modUDP_IP, dstport=0, dstipaddr=0}).
-record(l2_ip_consts,
		{no_dhcp=0, ipaddr=0, gwaddr=0, subnet_mask=0}).
-record(l2_dpnss_params,
		{mode=?IISDNl2modDPNSS, pbx_b=0, sabmr_as_ack=0, tie_line_mode=0}).
-record(l2_dpnss_consts,
		{nl=0, nt1=0, nt2=0}).
-record(l2_v110_params,
		{mode=?IISDNl2modV110, ebits=0, flow_control=0, 
		nine_byte_rx_frames=0, num_tx_idle_frames=0, max_rx_frame_size=0,
		stale_rx_data_timer=0, filter_status_messages=0}).
-record(data_interface,
		{enable=0, data_channel=0, fillandspill=0, allow_buffer_preload=0}).


-define(IISDNl3modDISABLED,     0).
-define(IISDNl3modQ931,         1).
-define(IISDNl3modX25_PKT,      2).
-define(IISDNl3modQ933,         3).
-define(IISDNl3modBONDING,      4).
-define(IISDNl3modPM,           5).
-define(IISDNl3modRELAY,        6).
-define(IISDNl3modDPNSS,        7).
-define(IISDNl3modDASS,         8).
-define(IISDNl3modQ933_ANNEX_A, 9).

-define(IISDNstATT_4ESS,        16#00).
-define(IISDNstATT_5ESS,        16#01).
-define(IISDNstNTI_DMS100,      16#02).
-define(IISDNstNTI_DMS250,      16#03).
-define(IISDNstMD110_T1,        16#04).
-define(IISDNstMD110_E1,        16#05).
-define(IISDNstSIEMENS,         16#06).
-define(IISDNstNTT,             16#07).
-define(IISDNstUNKNOWN,         16#08).
-define(IISDNstMAX_SWITCH_TYP,  16#08).

-define(IISDNvarATT_CUSTOM,     16#00).
-define(IISDNvarNTI_CUSTOM,     16#01).
-define(IISDNvarNATL_ISDN_1,    16#02).
-define(IISDNvarNATL_ISDN_2,    16#03).
-define(IISDNvarJATE,           16#04).
-define(IISDNvarCTR3,           16#05).
-define(IISDNvarNET3,           16#05).
-define(IISDNvarCTR4,           16#06).
-define(IISDNvarNET5,           16#06).
-define(IISDNvar1TR6_BRI,       16#07).
-define(IISDNvar1TR6_IISDN,     16#08).
-define(IISDNvarVN3,            16#09).
-define(IISDNvarITU,            16#0A).
-define(IISDNvarCCITT,          16#0A).
-define(IISDNvarQ933,           16#0B).
-define(IISDNvarQ933_T123,      16#0C).
-define(IISDNvarTS014,          16#0D).
-define(IISDNvarTS013,          16#0E).
-define(IISDNvarARINC_746,      16#0F).
-define(IISDNvarGR_303,         16#10).
-define(IISDNvarGR_303_TMC,     16#11).

-record(level3_cnfg,
		{l3_mode=0, cnfg=#q931_cnfg{}}).
-record(q931_cnfg,
		{switch_type=0, variant=0, call_filtering=0,
		q931_timers=#q931_timers{},
		b_channel_service_state=lists:duplicate(?IISDN_NUM_DS1_INTERFACES, 0),
		nfas=0, e1_30_bchan=0, basic_rate=0, net_side_emul=0, 
		b_chan_negot=0, proc_on_exclusv=0, chanid_slot_map=0,
		sprs_chanid_callproc=0, no_chanid_callproc=0, append_raw_qmsg=0,
		ccitt_mode=0, raw_qmsg=0, no_ie_errcheck=0, user_ie_encode=0,
		overlap_rcv=0, send_l3l4_callproc=0, sending_cmplt=0, 
		require_send_complete=0, report_incoming_callproc=0,
		no_tx_conn_ack=0, no_rx_conn_ack=0, sprs_chanid_setupack=0,
		no_chanid_setupack=0, no_canned_spid_rej=0, call_reject_notify=0,
		advice_of_charge=0, message_segmentation=0, no_bc_user_info=0,
		incoming_call_slot_map=0, release_complete_control=0,
		primary_lapdid=0, backup_lapdid=0, primary_ifnum=0,
		backup_ifnum=0, backup_control=0, spid_len=0, spid_1_len=0,
		dn_len=0, dn_1_len=0, 
		spid=lists:duplicate(?IISDN_MAX_SPID_LEN, 0),
		spid_1=lists:duplicate(?IISDN_MAX_SPID_LEN, 0),
		dn=lists:duplicate(?IISDN_MAX_DN_LEN, 0),
		dn_1=lists:duplicate(?IISDN_MAX_DN_LEN, 0),
		chan_id_high_bit=0, att_cust_bri_ekts=0, subscribe_connack=0,
		suppress_auto_spid=0, accept_all_bri_calls=0}).
-record(q931_timers,
		{t302=0, t305=0, t308=0, t313=0, t314=0, t316=0, t318=0, t319=0,
		t3m1=0, t321=0}).

-define(IISDN_MAX_BOND_CHAN, @IISDN_MAX_BOND_CHAN@).
-record(bonding_data,
		{mode=0, destination=0, num_tx_buf=0, num_rx_buf=0,
		data_channel=0, txinit=0, txadd01=0, txfa=0, txdisc=0,
		txdeq=0, tcid=0, tanull=0, channels=0, 
		directory=lists:duplicate(?IISDN_MAX_BOND_CHAN, 0)}).

-record(x25_config,
		{cfg_msk=0, t10=0, t11=0, t12=0, t13=0, t28=0, p=0, w=0,
		max_clr_retry=0, max_svcs=0, max_pvcs=0}).
-record(pm_config,
		{mode=0, carrier=0, fdl_alert=0, 
		equipmentid=lists:duplicate(10, 0),
		locationid=lists:duplicate(11, 0),
		frameid=lists:duplicate(10, 0),
		unitid=lists:duplicate(6, 0),
		facilityid=lists:duplicate(38, 0)}).
-record(relay_config,
		{default_dest=0, default_dest_id=0, default_root_idx=0}).
-record(dpnsscc_config,
		{pbx_y=0, no_virtual_channels=0, dest_addr_len=0, 
		b_channel_service_state=0, v_channel_service_state=0,
		t_i_msg=0, t_guard=0}).
-record(dasscc_config,
		{b_channel_service_state=0, t_digit_racking=0, n_clear_retries=0}).
-record(q933a_config,
		{network_side=0, n391=0, n392=0, n393=0, t391=0, t392=0}).


-record(data_interface_configuration,
		{dchan_descr_addr=0, num_dchan_descr=0,
		dchan_event_queue_addr=0, num_l3l4_dchan_events=0,
		num_l4l3_dchan_events=0}).

